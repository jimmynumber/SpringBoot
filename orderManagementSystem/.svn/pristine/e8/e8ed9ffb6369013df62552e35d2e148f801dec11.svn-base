<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN" 
"http://mybatis.org/dtd/mybatis-3-mapper.dtd">
<mapper namespace="com.want.mapper.CreateOrderMapper">

 	<select id="packageList" resultType="com.want.po.PackageInfo">
        SELECT PACKAGE_ID,PACKAGE_NAME,SALE_PRICE,DISCOUNT_PRICE
        ,UNIT_NAME,SALE_COMPANY,DISTRIBUTION_CHANNEL,PRODUCT_GROUP
         FROM PACKAGE where IS_DELETE=0 and SALE_COMPANY=#{saleCompany}
         and DISTRIBUTION_CHANNEL=#{distributionChannel} 
         and PRODUCT_GROUP=#{productGroup}
 	</select>
 	
 	<select id="customerReceverAddressesList" resultType="com.want.dto.CustomerReceverAddresses" parameterType="String">
        select distinct CUSTOMER_RECEVER_ADDRESSES.SAP_RECEIVER_CODE,
		CUSTOMER_RECEVER_ADDRESSES.SAP_RECEIVER_NAME,
		CUSTOMER_RECEVER_ADDRESSES.ADDRESS 
		from CUSTOMER,CUSTOMER_RECEVER_ADDRESSES
		where CUSTOMER.CUSTOMER_CODE=CUSTOMER_RECEVER_ADDRESSES.CUSTOMER_CODE  
		AND CUSTOMER.CUSTOMER_CODE=#{customerCode} AND CUSTOMER.STATUS=0
 	</select>
 	
 	<select id="customerList" resultType="com.want.dto.Customer" parameterType="String">
        SELECT distinct
		    c.CUSTOMER_CODE,
		    c.ABBREVIATION,
		    c.SALE_COMPANY,
		    c.DISTRIBUTION_CHANNEL,
		    c.PRODUCT_GROUP,
		    d.SALE_COMPNAY_NAME,
		    e.DISTRIBUTION_CHANNEL_NAME,
		    f.PRODUCT_GROUP_NAME,
		    (
		        SELECT DISTINCT
		            ORG_NAME
		        FROM
		            ORGANIZATION
		        WHERE
		            ORG_LEVEL =2 START WITH ORG_ID = c.PARENT_CODE CONNECT BY prior PARENT_ORG_ID=ORG_ID )
		    AS REGION_NAME,
		    (
		        SELECT DISTINCT
		            ORG_ID
		        FROM
		            ORGANIZATION
		        WHERE
		            ORG_LEVEL =2 START WITH ORG_ID = c.PARENT_CODE CONNECT BY prior PARENT_ORG_ID=ORG_ID )
		    AS REGION_ID,
		    c.FACTORY AS COMPANY_ID,
		    c.FACTORY_NAME AS COMPANY_NAME,
		    c.PARENT_CODE as BRANCH_ID,
		    b.ORG_NAME as BRANCH_NAME,
		    c.SAP_BUYER_CODE,
		    c.SAP_BUYER_NAME,
		    c.CONTACT,
		    c.CONTACT_TEL
		FROM
		    CUSTOMER c
		    INNER JOIN (
		        SELECT
		            ORG_ID,
		            ORG_NAME
		        FROM
		            ORGANIZATION
		        WHERE
		            ORG_NAME LIKE '%营业所' START WITH ORG_ID IN
		            (
		                SELECT
		                    a.ORG_ID
		                FROM
		                    ORGANIZATION a,
		                    EMP_ORG_REL b
		                WHERE
		                    a.ORG_ID=b.ORG_ID
		                AND b.EMP_ID=#{userId} ) CONNECT BY prior ORG_ID=PARENT_ORG_ID ) b
		                ON c.PARENT_CODE=b.ORG_ID 
              LEFT JOIN CHANNEL_INFO d ON d.sale_compnay_id=c.sale_company
              LEFT JOIN CHANNEL_INFO e ON e.distribution_channel_id=c.distribution_channel
              LEFT JOIN CHANNEL_INFO f ON f.product_group_id=c.product_group
			WHERE c.STATUS=0
		    <if test="customerId != null and customerId != '' "> 
				 AND c.CUSTOMER_CODE =#{customerId,jdbcType=VARCHAR}    
			</if>	
			<if test="customerName != null and customerName != '' "> 
				 AND c.ABBREVIATION like '%'||#{customerName,jdbcType=VARCHAR}||'%' 
			</if>	
 	</select>
 	
 	<select id="promoteList" resultType="com.want.po.PromoteInfo">
 		select a.PROMOTE_ID,a.PROMOTE_POLICY_DESC,b.SALES_PRICE AS SALE_PRICE,b.DISCOUNT_PRICE
 		,b.GIVE_PRODID,b.PROMOTE_COUNT,b.PROMOTE_UNIT,b.GIVE_COUNT
 		,b.GIVE_UNIT from PROMOTE_INFO a
		inner join PROMOTE_DETAIL b on a.PROMOTE_ID=b.PROMOTE_ID
		inner join PROMOTE_CUSTOMER c on a.PROMOTE_ID=c.PROMOTE_ID
		where a.STATUS=1 and a.PROMOTE_TYPE=1 and c.STATUS=1
		and b.PROMOTE_PRODID=#{productCode}  
		and b.DISTRIBUTION_CHANNEL=#{distributionChannel} 
		and b.PRODUCT_GROUP=#{productGroup} 
		and (c.CUSTOMER_ID=#{sapBuyerCode} OR c.CUSTOMER_ID='ALL')
 	</select>
 	
 	<select id="getProductPrice" resultType="Double" parameterType="String">
 		select PRICE from PRODUCT_PRICE
		where DEL_FLAG=0
		and TO_DATE(START_DATE,'yyyy-mm-dd') <![CDATA[ <= ]]> sysdate
		and TO_DATE(END_DATE,'yyyy-mm-dd') <![CDATA[ >= ]]> sysdate
		<if test="saleCompany != null and saleCompany != '' "> 
			and SALE_COMPANY=#{saleCompany}
		</if>
		<if test="distributionChannel != null and distributionChannel != '' "> 
			and DISTRIBUTION_CHANNEL=#{distributionChannel}
		</if>
		<if test="productGroup != null and productGroup != '' "> 
			and PRODUCT_GROUP=#{productGroup}
		</if>
		<if test="productGroup == null or productGroup == '' "> 
			and PRODUCT_GROUP is null
		</if>
		<if test="customerCode != null and customerCode != '' "> 
			and CUSTOMER_CODE=#{customerCode}
		</if>
		<if test="customerCode == null or customerCode == '' "> 
			and CUSTOMER_CODE is null
		</if>
		<if test="productCode != null and productCode != '' "> 
			and PRODUCT_CODE=#{productCode}
		</if>
 	</select>
 	
 	<!--查询品项信息-->
 	<select id="queryProdByCondition" resultType="com.want.dto.ProductInfoDto" parameterType="java.util.Map">
	 	SELECT  distinct
		a.PRODUCT_CODE as productCode,
		a.PRD_SHORT_NAME as prdShortName,
		a.UNIT as unit,
		a.UNIT_NAME as unitName,
		a.PRODUCT_NAME as productName
		FROM SALESGROUP2_RC.PRODUCT A
        INNER JOIN SALESGROUP2_RC.PRODUCT_ASSIGN B ON A.PRODUCT_CODE=B.PRODUCT_CODE 
		<where>
        		A.STATUS='0'
		    <if test="customerCode != null and customerCode != '' "> 
				AND B.CUSTOMER_CODE =#{customerCode,jdbcType=VARCHAR}    
			</if>	
		    <if test="saleCompnayId != null and saleCompnayId != '' "> 
				AND B.SALE_COMPANY =#{saleCompnayId,jdbcType=VARCHAR}    
			</if>	
		    <if test="distributionChannelId != null and distributionChannelId != '' "> 
				AND B.DISTRIBUTION_CHANNEL =#{distributionChannelId,jdbcType=VARCHAR}    
			</if>	    
			<if test="productGroupId != null and productGroupId != '' "> 
				AND B.PRODUCT_GROUP =#{productGroupId,jdbcType=VARCHAR}    
			</if>
			<if test="prodIds != null and prodIds != '' "> 
				AND INSTR(#{prodIds,jdbcType=VARCHAR},A.PRODUCT_CODE)>0     
			</if>
			<if test="levelId != null and levelId != '' "> 
				AND INSTR(A.STRUCTURE_CODE,#{levelId,jdbcType=VARCHAR})>0     
			</if>
			<if test="prods != null and prods != '' "> 
				AND (
				INSTR(A.PRODUCT_CODE,#{prods,jdbcType=VARCHAR})>0  or
				INSTR(A.PRODUCT_NAME,#{prods,jdbcType=VARCHAR})>0  or
				INSTR(A.PRD_SHORT_NAME,#{prods,jdbcType=VARCHAR})>0  
				)
			</if>			
		</where>
 	</select>
 	
 	<!--获取产品大类和产品线别-->
 	<select id="getProductLevel" resultType="com.want.dto.ProductLevelDto" parameterType="java.util.Map">
	 	SELECT 
		ID         as levelId,
		NAME       as levelName,
		PROD_LEVEL as prodLevel
		FROM SALESGROUP2_RC.PRODUCT_LEVEL 
        <where>
		    <if test="prodLevel != null and prodLevel != '' "> 
				AND PROD_LEVEL =#{prodLevel,jdbcType=VARCHAR}    
			</if>	
		    <if test="levelId != null and levelId != '' "> 
				AND ID =#{levelId,jdbcType=VARCHAR}    
			</if>	
		    <if test="levelName != null and levelName != '' "> 
		        AND INSTR(NAME,#{levelName,jdbcType=VARCHAR})>0  
			</if>	
		    <if test="levelIds != null and levelIds != '' "> 
		        AND INSTR(ID,#{levelIds,jdbcType=VARCHAR})>0  
			</if>	
			<if test="customerCode != null and customerCode != '' "> 
				AND EXISTS(
					SELECT 1
					FROM SALESGROUP2_RC.PRODUCT A
					INNER JOIN SALESGROUP2_RC.PRODUCT_ASSIGN B ON A.PRODUCT_CODE=B.PRODUCT_CODE 
					WHERE INSTR(A.STRUCTURE_CODE,PRODUCT_LEVEL.ID)>0
					    AND B.CUSTOMER_CODE =#{customerCode,jdbcType=VARCHAR}  
					<if test="saleCompnayId != null and saleCompnayId != '' "> 
						AND B.SALE_COMPANY =#{saleCompnayId,jdbcType=VARCHAR}    
					</if>	
				    <if test="distributionChannelId != null and distributionChannelId != '' "> 
						AND B.DISTRIBUTION_CHANNEL =#{distributionChannelId,jdbcType=VARCHAR}    
					</if>	    
					<if test="productGroupId != null and productGroupId != '' "> 
						AND B.PRODUCT_GROUP =#{productGroupId,jdbcType=VARCHAR}    
					</if>
				)		
			</if>
		</where>
 	</select>
 	
 	<!-- 更新ERP_ORDER表的金额 -->
   <update id="updateErpOrderSumAmount" parameterType="java.lang.String">
        update ERP_ORDER set SUM_AMOUNT =
		(select sum(SUM_AMOUNT) from ERP_ORDER_DETAIL
		where  ERP_ORDER_SID=#{sid,jdbcType=VARCHAR})
		where SID=#{sid,jdbcType=VARCHAR}
   </update>
   
   <select id="sthPromote" resultType="com.want.po.SthPromote" parameterType="String">
	    select A.SID,A.ORDER_COM_SID,C.SID AS KAN_CLASS_SID,A.SALE_PRICE,A.DISCOUNT_PRICE,
		C.TOTAL_BOX_COUNT,C.SKU_BOX_COUNT,C.GIVE_COUNT,B.PROMOTE_POLICY_DESC,
		C.BEGIN_DATE,C.END_DATE,C.KAN_CLASS_TYPE
		 from STH_ORDER_COMBINATION_DETAIL A
		INNER JOIN STH_ORDER_COMBINATION B ON A.ORDER_COM_SID=B.SID 
		INNER JOIN STH_KAN_CLASS C ON C.ORDER_COM_SID=B.SID 
		WHERE A.PROD_ID=#{productCode,jdbcType=VARCHAR}
		AND TO_DATE(C.BEGIN_DATE,'yyyyMMdd') <![CDATA[ <= ]]> TO_DATE(#{orderTime,jdbcType=VARCHAR},'yyyyMMddhh24miss')
		AND TO_DATE(C.END_DATE,'yyyyMMdd') <![CDATA[ >= ]]> TO_DATE(#{orderTime,jdbcType=VARCHAR},'yyyyMMddhh24miss')
		order by TOTAL_BOX_COUNT
	</select>
	
	<select id="historicalOrder" resultType="java.util.Map" parameterType="String">
	    select C.PRODUCT_ID,C.ORDER_LINE_TYPE,to_char(sum(C.COUNT)) COUNT from ORDER_INFO A
		INNER JOIN ERP_ORDER B ON A.ORDER_CODE=B.ORDER_CODE  AND B.ORDER_TYPE='4'
		 AND B.ORDER_STATUS = 'S'
		INNER JOIN ERP_ORDER_DETAIL C ON C.ERP_ORDER_SID=B.SID 
		WHERE A.SAP_BUYER_CODE=#{sapBuyerCode,jdbcType=VARCHAR}
		AND C.PROMOTE_ID = #{orderComSid,jdbcType=VARCHAR}
		AND A.ORDER_TIME <![CDATA[ <= ]]> TO_DATE(#{endDate,jdbcType=VARCHAR} ,'YYYY-MM-DD HH24:MI:SS')
		AND A.ORDER_TIME <![CDATA[ >= ]]> TO_DATE(#{beginDate,jdbcType=VARCHAR} ,'YYYY-MM-DD HH24:MI:SS')
		group by C.PRODUCT_ID,C.ORDER_LINE_TYPE
	</select>
	
	<select id="kanClassDetail" resultType="java.util.Map" parameterType="String">
	    select GIVE_PROD_ID,SALE_PRICE from STH_KAN_CLASS_DETAIL
		WHERE KAN_CLASS_SID=#{kanClassSid,jdbcType=VARCHAR}
	</select>
	
	<select id="getSthProductPrice" resultType="Double" parameterType="String">
	    select DISCOUNT_PRICE from STH_ORDER_COMBINATION_DETAIL
		WHERE PROD_ID=#{productCode,jdbcType=VARCHAR}
	</select>
 	
</mapper> 