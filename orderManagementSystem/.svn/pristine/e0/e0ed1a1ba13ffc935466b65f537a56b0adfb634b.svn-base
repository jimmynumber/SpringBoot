package com.want.service.impl;

import java.text.SimpleDateFormat;
import java.util.ArrayList;
import java.util.Date;
import java.util.List;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.stereotype.Service;
import org.springframework.transaction.annotation.Transactional;
import org.springframework.transaction.interceptor.TransactionAspectSupport;
import com.want.po.OrderDetail;
import com.want.po.OrderInfo;
import com.want.dto.OT_RETURN;
import com.want.mapper.OrderMapper;
import com.want.po.ERPOrder;
import com.want.po.ERPOrderDetail;
import com.want.po.PackageInfo;
import com.want.po.ProductInfo;
import com.want.service.IOrderWebService;
import com.want.vo.IT_EKKO;
import com.want.vo.IT_EKPO;

@Service
@Transactional
public class OrderWebServiceImpl implements IOrderWebService{
	
	@Autowired
    private OrderMapper orderMapper;
	 
	@SuppressWarnings("finally")
	public OT_RETURN syncOrder(IT_EKKO order,List<IT_EKPO> orderDetails) { 
			OT_RETURN otReturn=new OT_RETURN();
			SimpleDateFormat sdf = new SimpleDateFormat("yyyyMMddHHmmss");
			Date date=new Date();
			List<OrderDetail> orderDetailList =new ArrayList<>();
			List<ERPOrderDetail> erpOrderDetailList =new ArrayList<>();
			List<ERPOrder> erpOrderList =new ArrayList<>();
			//标记是否有不是大礼包的商品
			int num=0;
			int count=1;
			String sid1="";
			String sid2="";
			
		try {
			String dates = sdf.format(date);
			otReturn.setORDER_CODE(order.getORDER_CODE());
			order.setCREATE_DATE(dates);	
			long flag=orderMapper.queryOrderByCode(order.getORDER_CODE());
			if(flag>0) {
				otReturn.setTYPE("E");
				otReturn.setMESSAGE("重复订单");
			}else {
				//OrderInfo获取传入的ORDER数据
				OrderInfo orderInfo =new OrderInfo();
				orderInfo.setOrderCode(order.getORDER_CODE());
				orderInfo.setSaleCompany(order.getSALE_COMPANY());
				orderInfo.setDistributionChannel(order.getDISTRIBUTION_CHANNEL());
				orderInfo.setProductGroup(order.getPRODUCT_GROUP());
				orderInfo.setSapBuyerCode(order.getSAP_BUYER_CODE());
				orderInfo.setOrderTime(sdf.parse(order.getORDER_TIME()));
				orderInfo.setSapReceiverCode(order.getSAP_RECEIVER_CODE());
				orderInfo.setMemo(order.getMEMO());
				orderInfo.setCreateUser(order.getCREATE_USER());
				orderInfo.setCreateDate(sdf.parse(order.getCREATE_DATE()));
				
				//循环orderDetails，查询是否大礼包
				for(int i=0;i<orderDetails.size();i++) {
					//OrderDetails获取传入的orderDetail数据
					IT_EKPO orderDetailvo=orderDetails.get(i);
					OrderDetail orderDetail=new OrderDetail();
					orderDetail.setLineNumber(orderDetailvo.getLINE_NUMBER());
					orderDetail.setOrderCode(orderDetailvo.getORDER_CODE());
					orderDetail.setProductCode(orderDetailvo.getPRODUCT_CODE());
					orderDetail.setPrice(Double.parseDouble(orderDetailvo.getPRICE()));
					orderDetail.setUnit(orderDetailvo.getUNIT());
					orderDetail.setCount(Double.parseDouble(orderDetailvo.getCOUNT()));
					orderDetail.setSaleType(orderDetailvo.getSALE_TYPE());
					orderDetail.setSumAmount(Double.parseDouble(orderDetailvo.getSUM_AMOUNT()));
					orderDetail.setItemMemo(orderDetailvo.getITEM_MEMO());
					
					//根据ProductCode查询是否大礼包
					List<PackageInfo> packages = orderMapper.prodList(orderDetailvo.getPRODUCT_CODE());
					
					//商品为大礼包
					if(packages!=null&&packages.size()>0) {
						for(int k=0;k<orderDetail.getCount();k++) {	
							//ERPOrder获取点单数据，新建ERPOrder
							sid2=dates+String.format("%04d", count);
							count++;
							ERPOrder erpOrder2=new ERPOrder();
							erpOrder2.setSid(sid2);
							erpOrder2.setErpOrderCode("");
							erpOrder2.setOrderCode(order.getORDER_CODE());
							erpOrder2.setPackageId(orderDetail.getProductCode());
							erpOrder2.setCreateUser(order.getCREATE_USER());
							erpOrder2.setCreateDate(sdf.parse(order.getCREATE_DATE()));
							erpOrder2.setOrderStatus("");
							erpOrder2.setDesciption("");
							erpOrder2.setUpdateUser("");
							erpOrder2.setUpdateDate(null);
							erpOrder2.setDesciption(packages.get(0).getPackageName());
							
							erpOrderList.add(erpOrder2);
							orderDetail.setProductType("1");
						
							//循环大礼包商品数据
							for(int j=0;j<packages.size();j++) {
								PackageInfo packageInfo=packages.get(j);
								ERPOrderDetail erpOrderDetail=new ERPOrderDetail();
								erpOrderDetail.setErpOrderSid(sid2);
								erpOrderDetail.setProductId(packageInfo.getProdSku());
								erpOrderDetail.setProductName(packageInfo.getProdName());
								erpOrderDetail.setUnit(packageInfo.getUnitCode());
								erpOrderDetail.setUnitName(packageInfo.getUnitName());
								erpOrderDetail.setCount(packageInfo.getProdCount());
								erpOrderDetail.setSalePrice(packageInfo.getSalePrice());
								erpOrderDetail.setDiscountPrice(packageInfo.getDiscountPrice());
								erpOrderDetail.setSumAmount(packageInfo.getProdAmount());
								erpOrderDetail.setCreateUser(order.getCREATE_USER());
								erpOrderDetail.setCreateDate(sdf.parse(order.getCREATE_DATE()));
								//通过ERPOrderDetail添加到erpOrderDetailList中
								erpOrderDetailList.add(erpOrderDetail);
							}
						}
					}else {
						//不是大礼包的商品ERPOrder表只新增一次
						if(num==0) {
							//ERPOrder获取order相关数据
							sid1=dates+String.format("%04d", count);
							ERPOrder erpOrder1=new ERPOrder();
							erpOrder1.setSid(sid1);
							erpOrder1.setErpOrderCode("");
							erpOrder1.setOrderCode(order.getORDER_CODE());
							erpOrder1.setPackageId("");
							erpOrder1.setCreateUser(order.getCREATE_USER());
							erpOrder1.setCreateDate(sdf.parse(order.getCREATE_DATE()));
							erpOrder1.setOrderStatus("");
							erpOrder1.setDesciption("");
							erpOrder1.setUpdateUser("");
							erpOrder1.setUpdateDate(null);
							
							erpOrderList.add(erpOrder1);
							num++;
							count++;
						}
						
						//传入商品明细不是大礼包的，也通过ERPOrderDetail添加到erpOrderDetailList中
						//ErpOrderSid对应的是sid1，所有不是大礼包商品的数据
						ERPOrderDetail erpOrderDetail=new ERPOrderDetail();
						List<ProductInfo> product = orderMapper.queryUnitByProductCode(orderDetail.getProductCode());
						erpOrderDetail.setErpOrderSid(sid1);
						erpOrderDetail.setProductId(orderDetail.getProductCode());
						erpOrderDetail.setProductName(product.get(0).getProductName());
						erpOrderDetail.setUnit(orderDetail.getUnit());
						erpOrderDetail.setUnitName(product.get(0).getUnitName());
						erpOrderDetail.setCount(orderDetail.getCount());
						erpOrderDetail.setSalePrice(orderDetail.getPrice());
						erpOrderDetail.setDiscountPrice(orderDetail.getPrice());
						erpOrderDetail.setSumAmount(orderDetail.getSumAmount());
						erpOrderDetail.setCreateUser(order.getCREATE_USER());
						erpOrderDetail.setCreateDate(sdf.parse(order.getCREATE_DATE()));
						//通过ERPOrderDetail添加到erpOrderDetailList中
						erpOrderDetailList.add(erpOrderDetail);
						
						orderDetail.setProductType("0");
					}
					//orderDetail添加进orderDetailList统一保存
					orderDetailList.add(orderDetail);
				}
				
				orderMapper.insertOrderInfo(orderInfo);
				orderMapper.insertOrderDetail(orderDetailList);
				orderMapper.insertERPOrder(erpOrderList);
				orderMapper.insertERPOrderDetail(erpOrderDetailList);
				otReturn.setTYPE("S");
			}
		} catch (Exception e) {
			// TODO Auto-generated catch block
			e.printStackTrace();
			otReturn.setTYPE("E");
			otReturn.setMESSAGE("同步失败");
			TransactionAspectSupport.currentTransactionStatus().setRollbackOnly();
		}finally {
			return otReturn;
		}
	}
	
	

	
}