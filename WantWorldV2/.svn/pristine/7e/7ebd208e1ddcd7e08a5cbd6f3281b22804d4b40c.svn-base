package com.want.wantworld.controller;

import java.lang.reflect.Method;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.List;
import java.util.Map;

import javax.validation.Valid;

import org.slf4j.Logger;
import org.slf4j.LoggerFactory;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.web.bind.annotation.PostMapping;
import org.springframework.web.bind.annotation.RequestBody;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.RestController;
import org.springframework.web.context.WebApplicationContext;
import org.springframework.web.method.HandlerMethod;
import org.springframework.web.servlet.mvc.condition.PatternsRequestCondition;
import org.springframework.web.servlet.mvc.method.RequestMappingInfo;
import org.springframework.web.servlet.mvc.method.annotation.RequestMappingHandlerMapping;

import com.want.wantworld.annotation.PassToken;
import com.want.wantworld.dto.BaseDataDto;
import com.want.wantworld.service.BaseDataService;
import com.want.wantworld.utils.WResultUtil;
import com.want.wantworld.vo.UrlDesc;
import com.want.wantworld.vo.WResult;

import io.swagger.annotations.Api;
import io.swagger.annotations.ApiOperation;


@RestController
@RequestMapping("/base")
@Api(tags = "版本信息")
public class BaseDataCrontroller {
	
	private static final Logger logger = LoggerFactory.getLogger(BaseDataCrontroller.class);
	
	@Autowired
	private BaseDataService baseDataService;
	
	@Autowired
	private WebApplicationContext applicationContext;
	
	@PassToken
	@ApiOperation(value = "版本更新", notes = "")
	@PostMapping("/update")
	public WResult isUpate(@RequestBody @Valid BaseDataDto baseDataDto){
		return baseDataService.getBaseData(baseDataDto);
	}
	
	@ApiOperation(value = "接口清单", notes = "")
	@PostMapping("/InterfaceList")
    public WResult getInterfaceList(){
		RequestMappingHandlerMapping mapping = (RequestMappingHandlerMapping)applicationContext.getBean("requestMappingHandlerMapping");//getBean(RequestMappingHandlerMapping.class);
        Map<RequestMappingInfo, HandlerMethod> mappingHandlerMethods = mapping.getHandlerMethods();
 
        List<UrlDesc> list = new ArrayList();
 
        for (Map.Entry<RequestMappingInfo, HandlerMethod> map : mappingHandlerMethods.entrySet()) {
            UrlDesc urlDesc = new UrlDesc();
            RequestMappingInfo info = map.getKey();
            HandlerMethod method = map.getValue();
            PatternsRequestCondition patternsCondition = info.getPatternsCondition();
            String className = method.getMethod().getDeclaringClass().getName();
            /**
             * 匹配包路径 根据自己的路径替换
             */
            if (className.contains("com.want.wantworld.controller")) {
            	Class clazz = null;
            	try {
            		//获取类对象
                    clazz = Class.forName(method.getMethod().getDeclaringClass().getName());
				} catch (ClassNotFoundException e) {
					e.printStackTrace();
					logger.error("BaseDataCrontroller.getInterfaceList"+e.getMessage());
				}
                
                String metName = method.getMethod().getName();
                /**
                 * 因为单独获取一个类对象要指定参数，不适合批量使用，所以获取所有的方法然后根据name筛选
                 */
                Method[] clazzDeclaredMethods = clazz.getDeclaredMethods();
                Arrays.stream(clazzDeclaredMethods).forEach(
                        c -> {
                            if(c.getName().equals(metName)){
                                /* swagger注解 可以换成别的 */
                                ApiOperation annotation = c.getAnnotation(ApiOperation.class);
                                if(null != annotation){
                                    urlDesc.setDesc(annotation.value());
                                }
                            }
                        }
                );
                for(String url : patternsCondition.getPatterns()) {
                    urlDesc.setUrl(url);
                }
                list.add(urlDesc);
            }
        }
        return WResultUtil.ok(list);
    }

}
