package com.want.service.impl;

import java.text.SimpleDateFormat;
import java.util.ArrayList;
import java.util.Date;
import java.util.List;

import org.slf4j.Logger;
import org.slf4j.LoggerFactory;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.stereotype.Service;

import com.want.dto.OTReturn;
import com.want.mapper.VisitTractingMapper;
import com.want.po.Paging;
import com.want.po.StoreVisitTagTime;
import com.want.service.IStoreVisitWebService;
import com.want.vo.StoreVisit;
import com.want.vo.StoreVisit.TagTime;

@Service
//@Transactional
public class StoreVisitWebServiceImpl implements IStoreVisitWebService {
	private static final Logger LOGGER = LoggerFactory.getLogger(StoreVisitWebServiceImpl.class);
	@Autowired
    private VisitTractingMapper mapper;
	
	@Override
	public OTReturn syncStoreVisit(List<StoreVisit> storeVisit,Paging page) {
		OTReturn otReturn=new OTReturn();
		SimpleDateFormat dateFormat= new SimpleDateFormat("yyyy-MM-dd HH:mm:ss");
		SimpleDateFormat dateFormat1= new SimpleDateFormat("yyyyMMddHHmmss");
		Date date = new Date();
		String date1= dateFormat1.format(date);
		String sid="";
		System.out.println("BEGINDATE:"+dateFormat.format(date));
		try {
			if(storeVisit!=null&&storeVisit.size()>0) {
				LOGGER.info("StoreVisit.syncStoreVisit 总批次:{},当前批次:{},数据量:{} ",page.getTotal(),page.getCurrent(),storeVisit.size());
				if(page.getCurrent()==1) {
					// 首次推送数据 清空临时表数据，防止推送失败重新推送数据
					mapper.truncateStoreVisitTmp();
					mapper.truncateTagTimeTmp();
				}
				int count = (int) Math.floor(storeVisit.size()/50)+1;
				for(int i = 0;i < count;i++) {
					int begin=i*50;
					int end=i*50+50;
					List<StoreVisit> storeVisits = new ArrayList<StoreVisit>();
					List<StoreVisitTagTime> storeVisitTagTimes = new ArrayList<StoreVisitTagTime>();
					for(int j = begin;j < end && j < storeVisit.size();j++) {
						sid = date1+j;
						StoreVisit storeVisit1=storeVisit.get(j);
						storeVisit1.setSid(sid);
						storeVisits.add(storeVisit1);
						for (TagTime tagTime : storeVisit1.getLabelFees()) {
							StoreVisitTagTime storeVisitTagTime = new StoreVisitTagTime();
							storeVisitTagTime.setStoreVisitSid(sid);
							storeVisitTagTime.setTagTimeType("1");
							storeVisitTagTime.setDate(tagTime.getDate());
							storeVisitTagTime.setName(tagTime.getName());
							storeVisitTagTime.setDataTime(storeVisit.get(0).getDataTime());
							storeVisitTagTimes.add(storeVisitTagTime);
						}
						for (TagTime tagTime : storeVisit1.getCounterMark()) {
							StoreVisitTagTime storeVisitTagTime = new StoreVisitTagTime();
							storeVisitTagTime.setStoreVisitSid(sid);
							storeVisitTagTime.setTagTimeType("2");
							storeVisitTagTime.setDate(tagTime.getDate());
							storeVisitTagTime.setName(tagTime.getName());
							storeVisitTagTime.setDataTime(storeVisit.get(0).getDataTime());
							storeVisitTagTimes.add(storeVisitTagTime);
						}
					}
					if(storeVisits != null && storeVisits.size() > 0) {
						mapper.insertStoreVisitTmp(storeVisits);
						mapper.insertTagTimeTmp(storeVisitTagTimes);
					}
				}
				otReturn.setTYPE("S");
				otReturn.setMESSAGE("接收成功");
			}else {
				otReturn.setTYPE("E");
				otReturn.setMESSAGE("参数为空");
			}
		} catch (Exception e) {
			e.printStackTrace();
			otReturn.setTYPE("E");
			otReturn.setMESSAGE("同步失败:"+e.toString());
			LOGGER.error("同步失败:"+e.toString());
			//TransactionAspectSupport.currentTransactionStatus().setRollbackOnly();
		}
		Date date2 = new Date();
		System.out.println("ENDDATE:"+dateFormat.format(date2));
		if ("S".equals(otReturn.getTYPE()) && page.getTotal()==page.getCurrent()) {
			// 全部推送成功后 先根据临时表数据中时间范围 删除目的表数据，
			// 将临时表数据倒入目的表中，
			// 清空临时表 
				new Thread(() -> {
					mapper.deleteStoreVisit(null);
					mapper.clearTagTime(null);
					mapper.mergerStoreVisit();
					mapper.mergerTagTime();
					mapper.truncateStoreVisitTmp();
					mapper.truncateTagTimeTmp();
				}).start();
		}
		return otReturn;
	}
	

}
